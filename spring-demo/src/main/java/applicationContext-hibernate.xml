<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

	<context:component-scan base-package="com.zt"></context:component-scan>
	<!-- 引入属性文件 -->
	<context:property-placeholder location="classpath:db.properties" />
	
	<!-- 配置C3P0数据源
			配置dataSource Bean
	 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 使用外部化属性文件的属性 -->
		<property name="user" value="${user}"></property>
		<property name="password" value="${password}"></property>
		<property name="driverClass" value="${driverClass}"></property>
		<property name="jdbcUrl" value="${jdbcUrl}"></property>
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}"></property>
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
	</bean>
	
	<!-- 配置Hibernate 的SessionFactory 实例： 通过Spring 提供LocalSessionFactoryBean 进行配置 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 配置数据源属性 -->
		<property name="dataSource" ref="dataSource"></property>
		
		<!-- 配置Hibernate 配置文件的位置及名称，推荐使用。 -->
		
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
		
		<!-- 使用hibernateProperties 属性来配置Hibernate 原生的属性 -->
		<!-- 
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
    			<prop key="hibernate.hbm2ddl.auto">update</prop>
    			<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>
		-->
		 
		<!-- 配置Hibernate 映射文件的位置及名称，可以使用通配符。 -->
		<property name="mappingLocations" value="classpath:com/zt/entities/*.hbm.xml"></property>
	</bean>
	
	<!-- 配置Spring  的声明式事务-->
	<!-- 1.配置Hibernate事务管理器，org.springframework.orm.hibernate4.HibernateTransactionManager
			依赖注入sessionFactory 对象。
	 -->
    <bean id="transactionManager"
        class="org.springframework.orm.hibernate4.HibernateTransactionManager">
      <property name="sessionFactory" ref="sessionFactory" />
   </bean>
   
   <!-- 配置事务异常封装 -->
   <bean id="persistenceExceptionTranslationPostProcessor" 
       class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<!-- 2.配置事务属性，需要事务管理器。
		声明式容器事务管理 ,transaction-manager指定事务管理器为 transactionManager 。
	 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 3.配置事务切点，并把切点和事务属性关联起来 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.zt.service.*.*(..))" id="txPointCut" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
	</aop:config>
	
</beans>
